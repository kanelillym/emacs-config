#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Read Me!

This file is the readme, but it also /is/ the code. Neat! =org-babel= is used to 'tangle' the code blocks in this file and combine their contents to create the =init.el= file. Ain't that fancy :)

This is my current configuration for emacs, which I use for personal knowledge management and code development. There are a few places where I link into my knowledge graph, but it seems like github is made well enough to drop file links to files that are not in the repo so those links just don't show up. That this file is viewable through github is a neat bonus, but I anticipate always reading and tweaking it locally so I'm not going to make any special effort to fix or even indicate those links.

* Set lexical binding

Who knows what it does! Not me! But something in org roam depends on this.

#+begin_src emacs-lisp

  ;;; -*- lexical-binding: t; -*-

#+end_src

* Package management

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* System specific path settings

#+begin_src emacs-lisp

  (setq default-directory "~/../../Documents/git")
  (setq lk/org-file-path "~/../../Documents/org/")

#+end_src

** TODO Set up a block for handling machine specific config

* UI Configuration

#+begin_src emacs-lisp

  ;; Don't display the start page
  (setq inhibit-startup-message t)
  ;; Disable visible scrollbar
  (scroll-bar-mode -1)
  ;; Disable top toolbar
  (tool-bar-mode -1)
  ;; Disable tooltips
  (tooltip-mode -1)
  ;; Give space on the edges
  (set-fringe-mode 10)
  ;; Disable menu bar
  (menu-bar-mode -1)
  ;; When there is an alarm ping, flash the screen
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for org, terminal, and shell modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fonts

#+begin_src emacs-lisp

  (defvar runemacs/default-font-size 140)

  ;; By default, use Fira Code Retina font.
  (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)

  ;; For monospace, use Fira Code Retina font.
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 125)

  ;; For non-monospace (used in org mode), use Cantarell font.
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 125 :weight 'regular)

#+end_src

** Modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Themes

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Utility

Prompt with what command chords are available and what they will do when pausing during command input.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

Improve the help pages for variables and functions.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Autocompletion and Search Framework

I use ivy for search because [[id:21b9b919-ba2e-4f62-9740-41bb235d40c6][David Wilson of System Crafters]] uses it in the "Emacs from Scratch" tutorial series. It's fine, I don't really know any advantages or disadvantages to different completion frameworks. But I live and die by =counsel-switch-buffer= and counsel is built on top of ivy so I can never change lmao

#+begin_src emacs-lisp

  (use-package ivy
    ;; :diminish ; I'm not sure what this does, or why it's taken out.
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . counsel-up-directory)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("C-l" . counsel-up-directory)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

* Evil

Add vim-style keybindings and modes.

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-h-delete nil)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

Evil collection is a compatibility library for evil, to make sure things like magit work nicely with it.

#+begin_src emacs-lisp

  (use-package evil-collection
      :ensure t
      :after evil
      :config
      (evil-collection-init))

#+end_src

* Keybindings

All the keybindings which aren't set in package definitions and aren't map dependent.
I really ought to use hydra for more (or less), but I haven't found a solid use case yet.

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-y") 'yank)
  (global-set-key (kbd "C-c k") 'kill-region)
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Code Development Tools

** Magit

The best git tool I've ever used.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (global-set-key (kbd "C-x x b") 'magit-blame)

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/../../Documents/git")
      (setq projectile-project-search-path '("~/../../Documents/git"))
      (setq projectile-switch-project-action #'projectile-dired)))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

* Org

Org is the bread and butter, the lifeblood of my emacs workflow. This configuration section is my baby, and if you hurt it I will hurt you <3

** Setup

Before actually configuring org, create helper and prettifier functions that can be called later.
... I don't remember where the =efs/= prefix came from. Probably Daviwil again.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (auto-fill-mode 0)
    (setq evil-auto-indent nil))

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Org main config

#+begin_src emacs-lisp

  (use-package org
  :hook (org-mode . efs/org-mode-setup)
  :bind (("C-c a" . org-agenda))

  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-deadline-warning-days 8)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELLED(k@)")))
  ;; Configure custom agenda view
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (todo "ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+job")

          ;;Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<=15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20) ;; TODO tweak
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANCELLED"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))

  ;; Save org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Scheduled TODOs with STYLE: HABIT will show a history chart in the agenda
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
  (setq org-habit-preceding-days 15)
  (setq org-habit-following-days 5)

  (efs/org-font-setup))

#+end_src

Org Tempo helps with word expansion, e.g. using =<el `<TAB>'= as a shortcut for the emacs-lisp source blocks in this file.

#+begin_src emacs-lisp

  (require 'org-tempo)

#+end_src

The =org-structure-template-alist= determines what can be auto expanded as a code block. Each expanded block begins with =#+begin_= and continues with the second string in the relevant definition.

#+begin_src emacs-lisp

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Pretty Bullets

#+begin_src emacs-lisp

    (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center and pad org files

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Org Babel

Code block embedding, tangling, and evaluation.
This is built into Org, so this is just configuration and not activation.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (python . t)))
  (setq org-confirm-babel-evaluate nil)

#+end_src

*** Auto-tangle Configuration Files

Files which are intended to be narrated elisp config files can be specified here so that they automagically babel-tangle to their target files every time they are saved.

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/config.org")) ; This file
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org Roam

A [[id:1233da2d-22b0-4fbc-9435-87568b813666][Personal Knowledge Management]] tool based on [[https://roamresearch.com/][Roam Research]], sort of like a zettelkasten.

*** Main config

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :demand t  ;; Ensure org-roam is loaded by default
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (concat lk/org-file-path "roam"))
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate)
           ("C-c n p" . my/org-roam-find-active-project)
           ("C-c n a" . my/org-roam-find-area)
           ("C-c n t" . my/org-roam-capture-task)
           ("C-c n b" . my/org-roam-capture-inbox)
           ("C-c n T a" . org-roam-tag-add)
           ("C-c n T r" . org-roam-tag-remove)
           ("C-c n A a" . org-roam-alias-add)
           ("C-c n A r" . org-roam-alias-remove)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

#+end_src

*** Capture templates

Because org-roam has largely replaced my normal org-capture use case, these templates fulfill pretty much everything I would be using standard org-capture-templates for.

#+begin_src emacs-lisp

  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head
                    "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)

          ("p" "project" plain
           "* Goals\n** %?\n* Tasks\n** NEXT Add initial tasks\n* Dates"
           :if-new (file+head
                    "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project\n")
           :unnarrowed t)

          ("a" "area" plain
           "* Goals\n** %?\n* Tasks\n** NEXT Add initial tasks\n* Dates"
           :if-new (file+head
                    "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Area\n")
           :unnarrowed t)

          ("b" "bibliography" plain
           "\n* Source\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n%?"
           :if-new (file+head
                    "%<%Y%m%d%H%M%S>-biblio-${slug}.org" "#+title: ${title}\n#+filetags: biblio\n")
           :unnarrowed t)))

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %<%H:%M>: %?"
           :if-new (file+head
                    "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

#+end_src

*** Support Functions

**** Filtering

#+begin_src emacs-lisp

  (defun my/org-roam-filter-by-tags (taglist)
    "Create a lambda which returns t iff any string in TAGLIST is a tag on a provided org-roam node."
    (lambda (node)
      (setq check nil)
      (dolist (tag taglist) (if (member tag (org-roam-node-tags node)) (setq check t) nil))
      check))

  (defun my/org-roam-filter-by-tag (tag-name)
    "Takes TAG-NAME, a string, and creates a lambda which return t iff a provided org-roam node is tagged with TAG-NAME."
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    "Create and return a list of all org-roam nodes which have TAG-NAME as one of their tags."
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-filter-by-tags-exclude-archive (taglist)
    "Does the same thing as my/org-roam-filter-by-tags, but will always return nil if \"Archive\" is a member of the node's tags."
    (lambda (node)
      (setq check nil)
      (dolist (tag taglist)
        (if (and (member tag (org-roam-node-tags node)) (not (member "Archive" (org-roam-node-tags node))))
            (setq check t)
          nil))
      check))


#+end_src

**** Node Link Insertion

#+begin_src emacs-lisp

  (defun org-roam-node-insert-immediate (arg &rest args)
    "Insert a link to an org-roam node. If the node does not exist, create it but do not prompt for a template or contents."
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

#+end_src

**** Org Agenda management

#+begin_src emacs-lisp

  (defun my/org-roam-refresh-agenda-list ()
    "Build the `org-agenda-files' list to be all org-roam nodes which are tagged with any of '(\"Area\" \"Inbox\" \"Project\")."
    (interactive)
    (setq org-agenda-files
          (append (my/org-roam-list-notes-by-tag "Area")
                  (my/org-roam-list-notes-by-tag "Inbox")
                  (my/org-roam-list-notes-by-tag "Project"))))

  ;; Always build the org-agenda-files list on startup.
  (my/org-roam-refresh-agenda-list)

#+end_src

**** Node Searching

#+begin_src emacs-lisp

  (defun my/org-roam-project-finalize-hook ()
    "Refreshes `org-agenda-files' to ensure the captured node is added if the capture was not aborted."
    ;; When this hook is invoked, remove it from the hookpoint
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    (unless org-note-abort
      (my/org-roam-refresh-agenda-list)))

  (defun my/org-roam-find-active-project ()
    "Find or create a node by title which has the tag \"Project\" and does not have the tag \"Archive\". If the target node does not exist, the creation process is identical to `my/org-roam-find-all-projects'."
    (interactive)
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tags-exclude-archive '("Project"))
     nil
     ;; If the selected node does not exist, override capture templates so that only the Project template is available
     :templates '(("p" "project" plain
                   "* Goals\n%?\n* Tasks\n** NEXT Add initial tasks\n* Dates\n"
                   :if-new (file+head
                            "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
                   :unnarrowed t))))

  (defun my/org-roam-find-all-projects ()
    "Find or create an org node by title which has the tag \"Project\"."
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     nil
     :templates '(("p" "project" plain
                   "* Goals\n\n%?\n\n* Tasks\n\n** NEXT Add initial tasks\n\n* Dates\n\n"
                   :if-new (file+head
                            "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
                   :unnarrowed t))))

  (defun my/org-roam-find-archive ()
    "Find or create an org node by title which has the tag \"Archive\"."
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary. Capture templates are as default.
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Archive")
     nil))

  (defun my/org-roam-find-area ()
    "Find or create an org node by title which has the tag \"Area\"."
    (interactive)
    ;; Add the Area file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select an Area file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Area")
     nil
     :templates '(("a" "area" plain
                   "* Goals\n%?\n* Tasks\n** NEXT Add initial tasks\n* Dates\n"
                   :if-new (file+head
                            "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Area")
                   :unnarrowed t))))

#+end_src

**** Capturing

#+begin_src emacs-lisp

  (defun my/org-roam-capture-inbox ()
    "Capture a bullet into the Inbox.org file."
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "default" plain
                                     "* %?"
                                     :if-new (file+head
                                              "Inbox.org" "#+title: Inbox\n"))

                                    ("h" "inbox habit" plain
                                     "* TODO %?\n:PROPERTIES:\n:STYLE: habit\n:END:"
                                     :if-new (file+head
                                              "Inbox.org" "#+title: Inbox\n")))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Ensure that the project or area node is included in the org agenda after the capture is saved
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tags '("Area" "Project")))
                       :templates '(("p" "project" plain
                                     "** TODO %?"
                                     :if-new (file+head+olp
                                              "%<%Y%m%d%H%M%S>-${slug}.org"
                                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                              ("Tasks")))

                                    ("a" "area" plain
                                     "** TODO %?"
                                     :if-new (file+head+olp
                                              "%<%Y%m%d%H%M%S>-${slug}.org"
                                              "#+title: #{title}\n#+category: ${title}\n#+filetags: Area"
                                              ("Tasks"))))))

#+end_src

* Communication

It's cool to use emacs for internet communication!

** Matrix

Use the =ement= package by alphapapa for matrix chat. I previously had trouble getting this package to work with =use-package=, so I used =quelpa-use-package= to fetch it directly from github. That doesn't appear to be necessary anymore, but isn't tested so I'm leaving the old code in as comments for now.

#+begin_src emacs-lisp

  (use-package ement)
  ;; (use-package quelpa-use-package)
  ;; (quelpa '(ement :repo "alphapapa/ement.el" :fetcher github))

#+end_src

* Ledger

Ledger is a dual-book accounting tool in the CLI. It's usable on its own with manually editing text files, but this package helps streamline it and invoke the CLI tool through emacs.

#+begin_src emacs-lisp

  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.ledger\\'") ; file format which should be treated as a ledger file

  (use-package company-ledger) ; Use `company' autocomplete for ledger
  (add-hook 'ledger-mode-hook 'company-mode)

#+end_src

* Custom Set Variables

I probably don't want to manually set this! Definitely not here where it will always overwrite whatever emacs inserts. And yet.

#+begin_src emacs-lisp

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(pomodoro company-ledger ledger-mode org-roam-bibtex org-roam-ui python-black sqlite sqlite3 emacsql-sqlite org-roam emacsql org-pomodoro pytest python-pytest eslint-fix typescript-mode quelpa-use-package visual-fill-column org-bullets forge magit counsel-projectile projectile hydra evil-collection evil general helpful counsel ivy-rich which-key rainbow-delimiters doom-themes doom-modeline all-the-icons ivy use-package)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+end_src

* Start agenda when opening emacs

#+begin_src emacs-lisp

  (org-agenda-list)
  (org-agenda-day-view)
  (delete-other-windows)

#+end_src
